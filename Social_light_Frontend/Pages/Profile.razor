@page "/Profile"
@attribute [Authorize]
@inject IPostService postService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<div class="profile-container">
    <div class="profile-header">
        <div class="profile-avatar">
            <img src="https://cdn.pixabay.com/photo/2023/09/05/16/40/sunrise-8235464_1280.jpg" alt="Profile Image" />
        </div>
        <div class="profile-info">
            <h1>@(loginUserData?.Name ?? "Your Name")</h1>
            <p>@(loginUserData?.Email ?? "This is your bio.")</p>
            <button class="follow-button">Follow</button>
            <button class="tweet-button">Post</button>
        </div>
    </div>

    <div class="profile-content">
        <div class="post">
            @if (postData != null && postData.Any())
            {
                @foreach (var PostItem in postData)
                {
                    <div class="post-header">
                        <div class="post-usr-profile">
                            <img src="https://cdn.pixabay.com/photo/2023/09/05/16/40/sunrise-8235464_1280.jpg" alt="Profile Image" />
                            <h2>user name</h2>
                        </div>

                        <div>
                            <button class="edit-button" @onclick="() => EditPost(PostItem.Id)">Edit</button>
                            <button class="delete-button" @onclick ="() => DeletePost(PostItem.Id)">Delete</button>
                        </div>

                    </div>
                    <div class="post-content">
                        <h2>@PostItem.Title</h2>
                        @if (!string.IsNullOrEmpty(PostItem?.PostImage))
                        {
                            <img src="@PostItem.PostImage" alt="Post Image" class="post-image" />
                        }
                        <p>@PostItem?.Content</p>
                    </div>
                    <div class="user-icons">
                        <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor" class="bi bi-heart-fill" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
                        </svg>
                    </div>
                    <div class="post-border"></div>
                }
            }
            else
            {
                <p>No posts were found</p>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string username { get; set; }

    [Parameter]
    public string bio { get; set; }
    public List<PostDto> postData { get; set; } = new List<PostDto>();
    [CascadingParameter]
    public Task<AuthenticationState> _authState { get; set; }

    public User loginUserData { get; set; } = new User();
    private Guid userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authState;

        if (authState != null && authState.User != null)
        {
            var nameClaim = authState.User.FindFirst("name")?.Value;
            var emailClaim = authState.User.FindFirst("email")?.Value;

            if (!string.IsNullOrEmpty(nameClaim) && !string.IsNullOrEmpty(emailClaim))
            {
                loginUserData.Name = nameClaim;
                loginUserData.Email = emailClaim;
            }

            var userIdClaim = authState.User.FindFirst("sub")?.Value;
            if (!string.IsNullOrEmpty(userIdClaim))
            {
                userId = Guid.Parse(userIdClaim);
                postData = await postService.GetPostsByUserIdAsync(userId);
            }
        }
    }

    private void EditPost(Guid postId)
    {
        navigationManager.NavigateTo($"/Post/EditPost/{postId}");
    }

    private async Task DeletePost(Guid postId)
    {
       var response =  await   postService.DeletePostAsync(postId);
       if (response)
       {
            postData = await postService.GetPostsByUserIdAsync(userId);
       }
    }
}
